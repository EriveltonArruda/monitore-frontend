// lib/print/config.ts
export const currencyBR = (n: any) =>
  typeof n === 'number'
    ? n.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })
    : n ?? 'â€”';

export const dateBR = (d: any) => (d ? new Date(d).toLocaleString('pt-BR') : 'â€”');

type Col = { key: string; label: string; align?: 'left' | 'right' | 'center'; width?: string };

type KindConfig = {
  title: string;
  subtitle?: (sp: Record<string, any>) => string | null;
  endpoint: string; // relativo ao API_BASE
  columns: Col[];
  formatters?: Record<string, (v: any, row: any) => any>;
};

// ðŸ”§ registre aqui cada relatÃ³rio
export const kinds: Record<string, KindConfig> = {
  // Produtos
  products: {
    title: 'RelatÃ³rio de Produtos',
    subtitle: (sp) =>
      [
        sp.search ? `Filtro: "${sp.search}"` : null,
        sp.status ? `Status: ${sp.status}` : null,
      ]
        .filter(Boolean)
        .join(' Â· ') || null,
    endpoint: '/products',
    columns: [
      { key: 'id', label: '#', width: '80px' },
      { key: 'name', label: 'Produto' },
      { key: 'sku', label: 'SKU', width: '140px' },
      { key: 'stockQuantity', label: 'Estoque', align: 'right', width: '120px' },
      { key: 'costPrice', label: 'Custo', align: 'right', width: '140px' },
      { key: 'status', label: 'Status', width: '120px' },
    ],
    formatters: {
      costPrice: (v) => currencyBR(Number(v)),
    },
  },

  // MovimentaÃ§Ãµes de estoque
  'stock-movements': {
    title: 'RelatÃ³rio de MovimentaÃ§Ãµes de Estoque',
    subtitle: (sp) =>
      [
        sp.search ? `Filtro: "${sp.search}"` : null,
        sp.dateFrom ? `De: ${sp.dateFrom}` : null,
        sp.dateTo ? `AtÃ©: ${sp.dateTo}` : null,
        sp.type ? `Tipo: ${sp.type}` : null,
        sp.productId ? `Produto: ${sp.productId}` : null,
      ]
        .filter(Boolean)
        .join(' Â· ') || null,
    endpoint: '/stock-movements',
    columns: [
      { key: 'id', label: '#', width: '80px' },
      { key: 'type', label: 'Tipo', width: '110px' },
      { key: 'productName', label: 'Produto' },
      { key: 'quantity', label: 'Qtd', align: 'right', width: '100px' },
      { key: 'unitPriceAtMovement', label: 'Vlr Unit', align: 'right', width: '140px' },
      { key: 'createdAt', label: 'Data', width: '180px' },
      { key: 'details', label: 'Detalhes' },
    ],
    formatters: {
      unitPriceAtMovement: (v) => (v != null ? currencyBR(Number(v)) : 'â€”'),
      createdAt: (v) => dateBR(v),
    },
  },

  // Contas a pagar (mantido para a pÃ¡gina /dashboard/print/contas-a-pagar, caso usem)
  'accounts-payable': {
    title: 'RelatÃ³rio de Contas a Pagar',
    subtitle: (sp) =>
      [
        sp.search ? `Filtro: "${sp.search}"` : null,
        sp.status ? `Status: ${sp.status}` : null,
        sp.dateFrom ? `Venc. de ${sp.dateFrom}` : null,
        sp.dateTo ? `atÃ© ${sp.dateTo}` : null,
        sp.category ? `Categoria: ${sp.category}` : null,
      ]
        .filter(Boolean)
        .join(' Â· ') || null,
    endpoint: '/accounts-payable',
    columns: [
      { key: 'id', label: '#', width: '80px' },
      { key: 'name', label: 'Conta' },
      { key: 'category', label: 'Categoria', width: '160px' },
      { key: 'value', label: 'Valor', align: 'right', width: '140px' },
      { key: 'dueDate', label: 'Vencimento', width: '160px' },
      { key: 'status', label: 'Status', width: '120px' },
    ],
    formatters: {
      value: (v) => currencyBR(Number(v)),
      dueDate: (v) => dateBR(v),
    },
  },

  // Contratos
  contracts: {
    title: 'RelatÃ³rio de Contratos',
    subtitle: (sp) =>
      [
        sp.search ? `Filtro: "${sp.search}"` : null,
        sp.municipalityId ? `MunicÃ­pio: ${sp.municipalityId}` : null,
        sp.departmentId ? `Ã“rgÃ£o: ${sp.departmentId}` : null,
        sp.endFrom ? `Fim de: ${sp.endFrom}` : null,
        sp.endTo ? `Fim atÃ©: ${sp.endTo}` : null,
        sp.expiredOnly === 'true' ? 'Apenas expirados' : null,
        sp.dueInDays ? `Vencendo em: ${sp.dueInDays}d` : null,
      ].filter(Boolean).join(' Â· ') || null,
    endpoint: '/contracts',
    columns: [
      { key: 'id', label: '#', width: '70px' },
      { key: 'code', label: 'CÃ³digo', width: '140px' },
      { key: 'municipalityName', label: 'MunicÃ­pio' },
      { key: 'departmentName', label: 'Ã“rgÃ£o' },
      { key: 'period', label: 'VigÃªncia', width: '200px' },
      { key: 'monthlyValue', label: 'Valor Mensal', align: 'right', width: '150px' },
      { key: 'alert', label: 'Alerta', width: '120px' },
    ],
    formatters: {
      municipalityName: (_v, row) => row?.municipality?.name ?? 'â€”',
      departmentName: (_v, row) => row?.department?.name ?? 'â€”',
      period: (_v, row) => {
        const a = row?.startDate ? dateBR(row.startDate) : 'â€”';
        const b = row?.endDate ? dateBR(row.endDate) : 'â€”';
        return `${a} â†’ ${b}`;
      },
      monthlyValue: (v) => currencyBR(Number(v)),
      alert: (_v, row) => row?.alertTag ?? 'â€”',
    },
  },

  // RecebÃ­veis
  receivables: {
    title: 'RelatÃ³rio de RecebÃ­veis',
    subtitle: (sp) =>
      [
        sp.search ? `Filtro: "${sp.search}"` : null,
        sp.municipalityId ? `MunicÃ­pio: ${sp.municipalityId}` : null,
        sp.departmentId ? `Ã“rgÃ£o: ${sp.departmentId}` : null,
        sp.contractId ? `Contrato: ${sp.contractId}` : null,
        sp.status ? `Status: ${sp.status}` : null,
        sp.issueFrom ? `EmissÃ£o de ${sp.issueFrom}` : null,
        sp.issueTo ? `atÃ© ${sp.issueTo}` : null,
      ].filter(Boolean).join(' Â· ') || null,
    endpoint: '/receivables',
    columns: [
      { key: 'id', label: '#', width: '70px' },
      { key: 'contractCode', label: 'Contrato', width: '160px' },
      { key: 'noteNumber', label: 'NF', width: '120px' },
      { key: 'period', label: 'PerÃ­odo', width: '220px' },
      { key: 'issueDate', label: 'EmissÃ£o', width: '140px' },
      { key: 'netAmount', label: 'Valor LÃ­quido', align: 'right', width: '160px' },
      { key: 'status', label: 'Status', width: '120px' },
    ],
    formatters: {
      contractCode: (_v, row) => row?.contract?.code ?? 'â€”',
      period: (_v, row) => {
        const a = row?.periodStart ? dateBR(row.periodStart) : null;
        const b = row?.periodEnd ? dateBR(row.periodEnd) : null;
        return a || b ? `${a ?? 'â€”'} â†’ ${b ?? 'â€”'}` : row?.periodLabel ?? 'â€”';
      },
      issueDate: (v) => dateBR(v),
      netAmount: (v) => currencyBR(Number(v)),
      status: (v) => v ?? 'â€”',
    },
  },

  // Fornecedores
  suppliers: {
    title: 'RelatÃ³rio de Fornecedores',
    subtitle: (sp) =>
      [
        sp.search ? `Filtro: "${sp.search}"` : null,
      ].filter(Boolean).join(' Â· ') || null,
    endpoint: '/suppliers',
    columns: [
      { key: 'id', label: '#', width: '70px' },
      { key: 'name', label: 'Nome da Empresa' },
      { key: 'cnpj', label: 'CNPJ', width: '160px' },
      { key: 'phone', label: 'Telefone', width: '150px' },
      { key: 'email', label: 'Email', width: '220px' },
    ],
  },

  // âœ… Contatos
  contacts: {
    title: 'RelatÃ³rio de Contatos',
    subtitle: (sp) =>
      [
        sp.search ? `Filtro: "${sp.search}"` : null,
      ].filter(Boolean).join(' Â· ') || null,
    endpoint: '/contacts',
    columns: [
      { key: 'id', label: '#', width: '70px' },
      { key: 'name', label: 'Nome' },
      { key: 'company', label: 'Empresa', width: '220px' },
      { key: 'email', label: 'Email', width: '240px' },
      { key: 'phone', label: 'Telefone', width: '160px' },
      { key: 'type', label: 'Tipo', width: '120px' },
    ],
  },

  // âœ… MunicÃ­pios (NOVO)
  municipalities: {
    title: 'RelatÃ³rio de MunicÃ­pios',
    subtitle: (sp) =>
      [
        sp.search ? `Filtro: "${sp.search}"` : null,
      ].filter(Boolean).join(' Â· ') || null,
    endpoint: '/municipalities',
    columns: [
      { key: 'id', label: '#', width: '80px' },
      { key: 'name', label: 'MunicÃ­pio' },
    ],
  },

  // âœ… Ã“rgÃ£os/Secretarias (NOVO)
  departments: {
    title: 'RelatÃ³rio de Ã“rgÃ£os/Secretarias',
    subtitle: (sp) =>
      [
        sp.search ? `Filtro: "${sp.search}"` : null,
        sp.municipalityId ? `MunicÃ­pio: ${sp.municipalityId}` : null,
      ].filter(Boolean).join(' Â· ') || null,
    endpoint: '/departments',
    columns: [
      { key: 'id', label: '#', width: '80px' },
      { key: 'name', label: 'Ã“rgÃ£o/Secretaria' },
      { key: 'municipalityName', label: 'MunicÃ­pio', width: '260px' },
    ],
    formatters: {
      municipalityName: (_v, row) => row?.municipality?.name ?? 'â€”',
    },
  },
};
